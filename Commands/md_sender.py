
"""
Comando para enviar contenido de archivos markdown
Permite al owner seleccionar y enviar archivos .md espec√≠ficos
"""
import discord
from discord.ext import commands
import logging
import os
from pathlib import Path

logger = logging.getLogger(__name__)

# ID del owner
DISCORD_OWNER_ID = "916070251895091241"

class MDSelectView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=300)  # 5 minutos de timeout
        
    @discord.ui.select(
        placeholder="Selecciona un archivo markdown para enviar...",
        min_values=1,
        max_values=1,
        options=[
            discord.SelectOption(
                label="Reglas",
                description="Enviar contenido del archivo reglas.md",
                value="reglas.md",
                emoji="üìã"
            ),
            discord.SelectOption(
                label="Reportar",
                description="Enviar contenido del archivo reportar.md",
                value="reportar.md",
                emoji="üö®"
            ),
            discord.SelectOption(
                label="Art√≠culos",
                description="Enviar contenido del archivo articulos.md",
                value="articulos.md",
                emoji="üìñ"
            ),
            discord.SelectOption(
                label="Sugerencias",
                description="Enviar contenido del archivo sugerencias.md",
                value="sugerencias.md",
                emoji="üí°"
            ),
            discord.SelectOption(
                label="Anuncios",
                description="Enviar contenido del archivo announcement.md",
                value="announcement.md",
                emoji="üì¢"
            ),
            discord.SelectOption(
                label="Importante",
                description="Enviar contenido del archivo importante.md",
                value="importante.md",
                emoji="‚ö†Ô∏è"
            )
        ]
    )
    async def select_md_file(self, interaction: discord.Interaction, select: discord.ui.Select):
        try:
            selected_file = select.values[0]
            
            # Verificar que el archivo existe
            file_path = Path(selected_file)
            if not file_path.exists():
                error_embed = discord.Embed(
                    title="‚ùå Archivo No Encontrado",
                    description=f"El archivo `{selected_file}` no existe en el directorio del bot.",
                    color=0xff0000
                )
                await interaction.response.send_message(embed=error_embed, ephemeral=True)
                return
            
            # Leer el contenido del archivo
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read().strip()
                
                if not content:
                    empty_embed = discord.Embed(
                        title="‚ö†Ô∏è Archivo Vac√≠o",
                        description=f"El archivo `{selected_file}` est√° vac√≠o.",
                        color=0xffaa00
                    )
                    await interaction.response.send_message(embed=empty_embed, ephemeral=True)
                    return
                
                # Preparar el contenido para env√≠o
                file_name = file_path.stem.title()  # Obtener nombre sin extensi√≥n
                
                # Si el contenido es muy largo (m√°s de 4000 caracteres), dividirlo
                if len(content) > 4000:
                    # Crear embed inicial
                    main_embed = discord.Embed(
                        title=f"üìÑ {file_name}",
                        description=content[:3900] + "\n\n*[Contenido truncado - mensaje muy largo]*",
                        color=0x00ff88
                    )
                    
                    main_embed.add_field(
                        name="üìä Informaci√≥n",
                        value=f"‚Ä¢ **Archivo:** `{selected_file}`\n‚Ä¢ **Tama√±o:** {len(content)} caracteres\n‚Ä¢ **Enviado por:** {interaction.user.mention}",
                        inline=False
                    )
                    
                    main_embed.set_footer(text=f"RbxServers ‚Ä¢ Contenido de {selected_file}")
                    main_embed.timestamp = discord.datetime.now()
                    
                    await interaction.response.send_message(embed=main_embed, ephemeral=False)
                    
                    # Enviar el resto del contenido en mensajes adicionales si es necesario
                    remaining_content = content[3900:]
                    chunks = [remaining_content[i:i+4000] for i in range(0, len(remaining_content), 4000)]
                    
                    for i, chunk in enumerate(chunks[:3]):  # M√°ximo 3 chunks adicionales
                        continuation_embed = discord.Embed(
                            title=f"üìÑ {file_name} (Continuaci√≥n {i+1})",
                            description=chunk,
                            color=0x00ff88
                        )
                        await interaction.followup.send(embed=continuation_embed, ephemeral=False)
                
                else:
                    # Contenido normal, crear embed √∫nico
                    embed = discord.Embed(
                        title=f"üìÑ {file_name}",
                        description=content,
                        color=0x00ff88
                    )
                    
                    embed.add_field(
                        name="üìä Informaci√≥n",
                        value=f"‚Ä¢ **Archivo:** `{selected_file}`\n‚Ä¢ **Tama√±o:** {len(content)} caracteres\n‚Ä¢ **Enviado por:** {interaction.user.mention}",
                        inline=False
                    )
                    
                    embed.set_footer(text=f"RbxServers ‚Ä¢ Contenido de {selected_file}")
                    embed.timestamp = discord.datetime.now()
                    
                    await interaction.response.send_message(embed=embed, ephemeral=False)
                
                # Log del uso
                logger.info(f"Owner {interaction.user.name} envi√≥ contenido de {selected_file} ({len(content)} chars)")
                
            except UnicodeDecodeError:
                encoding_error_embed = discord.Embed(
                    title="‚ùå Error de Codificaci√≥n",
                    description=f"No se pudo leer el archivo `{selected_file}` debido a problemas de codificaci√≥n.",
                    color=0xff0000
                )
                await interaction.response.send_message(embed=encoding_error_embed, ephemeral=True)
                
            except Exception as e:
                read_error_embed = discord.Embed(
                    title="‚ùå Error de Lectura",
                    description=f"Error al leer el archivo `{selected_file}`: {str(e)[:200]}",
                    color=0xff0000
                )
                await interaction.response.send_message(embed=read_error_embed, ephemeral=True)
        
        except Exception as e:
            logger.error(f"Error en select_md_file: {e}")
            error_embed = discord.Embed(
                title="‚ùå Error Interno",
                description="Ocurri√≥ un error procesando la selecci√≥n del archivo markdown.",
                color=0xff0000
            )
            
            if not interaction.response.is_done():
                await interaction.response.send_message(embed=error_embed, ephemeral=True)
            else:
                await interaction.followup.send(embed=error_embed, ephemeral=True)

def setup_commands(bot):
    """
    Configurar el comando /md
    """
    
    @bot.tree.command(name="md", description="[OWNER ONLY] Enviar contenido de archivos markdown del bot")
    async def md_command(interaction: discord.Interaction):
        """Comando para seleccionar y enviar archivos markdown"""
        user_id = str(interaction.user.id)
        username = f"{interaction.user.name}#{interaction.user.discriminator}"
        
        # Verificar que solo el owner pueda usar este comando
        if user_id != DISCORD_OWNER_ID:
            embed = discord.Embed(
                title="‚ùå Acceso Denegado",
                description="Este comando solo puede ser usado por el owner del bot.",
                color=0xff0000
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        try:
            # Crear embed con instrucciones
            instruction_embed = discord.Embed(
                title="üìÑ Selector de Archivos Markdown",
                description="Selecciona el archivo markdown que quieres enviar al canal:",
                color=0x3366ff
            )
            
            instruction_embed.add_field(
                name="üìã Archivos Disponibles:",
                value="‚Ä¢ **Reglas** - Reglas del servidor\n‚Ä¢ **Reportar** - Gu√≠a de reportes\n‚Ä¢ **Art√≠culos** - Art√≠culos informativos\n‚Ä¢ **Sugerencias** - Informaci√≥n de sugerencias\n‚Ä¢ **Anuncios** - Anuncios del bot\n‚Ä¢ **Importante** - Informaci√≥n importante",
                inline=False
            )
            
            instruction_embed.add_field(
                name="üí° Instrucciones:",
                value="1. Usa el men√∫ desplegable de abajo\n2. Selecciona el archivo deseado\n3. El contenido se enviar√° autom√°ticamente",
                inline=False
            )
            
            instruction_embed.set_footer(text=f"Solicitado por {username}")
            instruction_embed.timestamp = discord.datetime.now()
            
            # Crear la vista con el selector
            view = MDSelectView()
            
            await interaction.response.send_message(
                embed=instruction_embed, 
                view=view, 
                ephemeral=True
            )
            
            logger.info(f"Owner {username} (ID: {user_id}) us√≥ comando /md")
        
        except Exception as e:
            logger.error(f"Error en comando /md: {e}")
            
            error_embed = discord.Embed(
                title="‚ùå Error",
                description="Ocurri√≥ un error al procesar el comando.",
                color=0xff0000
            )
            error_embed.add_field(name="üêõ Error", value=f"```{str(e)[:200]}```", inline=False)
            
            if not interaction.response.is_done():
                await interaction.response.send_message(embed=error_embed, ephemeral=True)
            else:
                await interaction.followup.send(embed=error_embed, ephemeral=True)
    
    logger.info("‚úÖ Comando /md configurado exitosamente")
    return True

def cleanup_commands(bot):
    """Funci√≥n de limpieza opcional"""
    pass
