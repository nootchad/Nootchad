"""
Comando /publicget - P√∫blico
Comando para obtener servidores de una API externa por ID de juego (versi√≥n p√∫blica)
"""
import discord
from discord.ext import commands
import logging
import requests
import asyncio
from datetime import datetime, timedelta

logger = logging.getLogger(__name__)

# --- Limitador de Tasa ---
class RateLimiter:
    def __init__(self, default_limit, donator_limit):
        self.default_limit = default_limit
        self.donator_limit = donator_limit
        self.user_requests = {} # {user_id: {'count': count, 'reset_time': datetime}}

    def get_user_usage(self, user_id: str) -> int:
        now = datetime.now()
        if user_id not in self.user_requests:
            return 0

        request_data = self.user_requests[user_id]
        if now < request_data['reset_time']:
            return request_data['count']
        else:
            # Reset count if it's a new day
            self.user_requests[user_id] = {'count': 0, 'reset_time': now + timedelta(days=1)}
            return 0

    def increment_user_usage(self, user_id: str) -> bool:
        now = datetime.now()
        limit = self.get_user_usage(user_id) # This will get the current count for today

        # Prepare to increment
        new_count = limit + 1

        # Update the user's request data for the current day
        self.user_requests[user_id] = {'count': new_count, 'reset_time': now + timedelta(days=1)}
        return True # Indicate that the usage was incremented

# Definir l√≠mites
DAILY_LIMIT_REGULAR = 10
DAILY_LIMIT_DONATOR = 50

limiter = RateLimiter(DAILY_LIMIT_REGULAR, DAILY_LIMIT_DONATOR)

async def check_user_donation_status(user_id: str) -> bool:
    """Verifica si un usuario es donador usando el nuevo sistema simplificado."""
    try:
        logger.info(f"Verificando estado de donador para el usuario ID: {user_id}")
        
        # Importar funci√≥n del comando donacion
        from Commands.donacion import is_user_donator
        
        # Verificar si es donador usando el nuevo sistema
        is_donator = is_user_donator(user_id)
        
        if is_donator:
            logger.info(f"Usuario {user_id} CONFIRMADO como donador (sistema nuevo)")
            return True
        else:
            logger.info(f"Usuario {user_id} NO es donador (sistema nuevo)")
            return False
            
    except Exception as e:
        logger.error(f"Error verificando estado de donador para {user_id}: {e}")
        return False

def setup_commands(bot):
    """Configurar comando public get"""

    @bot.tree.command(name="publicget", description="Obtener servidores de la API externa por ID de juego")
    async def publicget_command(interaction: discord.Interaction, game_id: str):
        """
        Comando p√∫blico para obtener servidores de API externa

        Args:
            game_id: ID del juego de Roblox para obtener servidores
        """
        user_id = str(interaction.user.id)
        username = f"{interaction.user.name}#{interaction.user.discriminator}"

        # Defer response
        await interaction.response.defer(ephemeral=False)

        # Verificar l√≠mite de uso diario
        is_donator = await check_user_donation_status(user_id)
        current_limit = DAILY_LIMIT_DONATOR if is_donator else DAILY_LIMIT_REGULAR
        current_usage = limiter.get_user_usage(user_id)

        if current_usage >= current_limit:
            remaining_uses = current_limit - current_usage
            status_text = "üéÅ Donador" if is_donator else "<:1000182614:1396049500375875646> Regular"
            limit_embed = discord.Embed(
                title="‚è≥ L√≠mite de Uso Diario Alcanzado",
                description=f"Has alcanzado tu l√≠mite diario de usos para este comando.",
                color=0xffc107 # Amarillo
            )
            limit_embed.add_field(
                name="<:stats:1418490788437823599> Tu Estado de Uso",
                value=f"{status_text} | **{current_usage}/{current_limit}** usos hoy | **{remaining_uses}** restantes",
                inline=False
            )
            limit_embed.add_field(
                name="<a:foco:1418492184373755966> Sugerencia",
                value="Intenta de nuevo ma√±ana o considera donar para obtener un l√≠mite mayor.",
                inline=False
            )
            await interaction.followup.send(embed=limit_embed, ephemeral=True)
            logger.warning(f"Usuario {username} ({user_id}) excedi√≥ el l√≠mite diario de /publicget.")
            return

        # Incrementar uso si no se ha alcanzado el l√≠mite
        limiter.increment_user_usage(user_id)


        try:
            # Validar formato de game_id
            if not game_id.isdigit():
                embed = discord.Embed(
                    title="‚ùå ID de Juego Inv√°lido",
                    description="El ID del juego debe ser un n√∫mero v√°lido.",
                    color=0x6c757d
                )
                await interaction.followup.send(embed=embed, ephemeral=True)
                return

            # Crear embed de cargando
            loading_embed = discord.Embed(
                title="<a:loading:1418504453580918856> Obteniendo Servidores",
                description=f"Consultando API externa para el juego ID: `{game_id}`",
                color=0x6c757d
            )
            loading_embed.add_field(name="‚è≥ Estado", value="Conectando con la API...", inline=False)
            loading_embed.add_field(name="<a:control:1418490793223651409> ID del Juego", value=f"`{game_id}`", inline=True)
            loading_embed.add_field(name="<a:latencia:1418504412049182740> API", value="v0-discord-bot-api-snowy.vercel.app", inline=True)
            loading_embed.add_field(name="<:1000182614:1396049500375875646> Solicitado por", value=f"{username}", inline=True)

            message = await interaction.followup.send(embed=loading_embed)

            # Hacer petici√≥n a la API
            api_url = f"https://v0-discord-bot-api-snowy.vercel.app/api/data?game_id={game_id}"

            logger.info(f"<a:latencia:1418504412049182740> Usuario p√∫blico {username} haciendo petici√≥n a API: {api_url}")

            # Ejecutar la petici√≥n en un hilo separado para evitar bloquear asyncio
            def make_request():
                try:
                    response = requests.get(api_url, timeout=30)
                    return response
                except Exception as e:
                    logger.error(f"‚ùå Error en petici√≥n HTTP: {e}")
                    raise

            # Ejecutar la petici√≥n de forma as√≠ncrona
            loop = asyncio.get_event_loop()
            response = await loop.run_in_executor(None, make_request)

            # Procesar respuesta
            if response.status_code == 200:
                try:
                    data = response.json()

                    # Verificar estructura de respuesta - manejar nueva respuesta de API
                    if data.get("success") == False:
                        # API responde con √©xito = False cuando no hay datos
                        # No se encontraron servidores
                        no_servers_embed = discord.Embed(
                            title="üîç Sin Servidores Disponibles",
                            description=data.get("message", "No se encontraron servidores en nuestra base de datos para este juego."),
                            color=0x6c757d
                        )

                        no_servers_embed.add_field(
                            name="<a:control:1418490793223651409> ID del Juego",
                            value=f"`{game_id}`",
                            inline=True
                        )

                        no_servers_embed.add_field(
                            name="<:stats:1418490788437823599> Servidores Encontrados",
                            value="`0`",
                            inline=True
                        )

                        no_servers_embed.add_field(
                            name="<:1000182614:1396049500375875646> Solicitado por",
                            value=f"{username}",
                            inline=True
                        )

                        no_servers_embed.add_field(
                            name="<a:foco:1418492184373755966> Sugerencia",
                            value="‚Ä¢ Verifica que el ID del juego sea correcto\n‚Ä¢ El juego podr√≠a no tener servidores VIP\n‚Ä¢ Intenta con otro ID de juego",
                            inline=False
                        )

                        no_servers_embed.add_field(
                            name="<a:loading:1418504453580918856> Consultado",
                            value=f"<t:{int(datetime.now().timestamp())}:R>",
                            inline=True
                        )

                        # Agregar informaci√≥n de l√≠mites para respuestas sin servidores
                        try:
                            is_donator_info = await check_user_donation_status(user_id)
                            current_usage_info = limiter.get_user_usage(user_id)
                            daily_limit_info = DAILY_LIMIT_DONATOR if is_donator_info else DAILY_LIMIT_REGULAR
                            remaining_uses = daily_limit_info - current_usage_info

                            status_text = "üéÅ Donador" if is_donator_info else "<:1000182614:1396049500375875646> Regular"

                            no_servers_embed.add_field(
                                name="<:stats:1418490788437823599> Tu Estado de Uso",
                                value=f"{status_text} | **{current_usage_info}/{daily_limit_info}** usos hoy | **{remaining_uses}** restantes",
                                inline=False
                            )
                        except Exception as e:
                            logger.error(f"Error agregando info de l√≠mites: {e}")

                        no_servers_embed.set_footer(text="RbxServers ‚Ä¢ API Externa ‚Ä¢ L√≠mites diarios aplicados")

                        await message.edit(embed=no_servers_embed)

                        logger.info(f"‚ö†Ô∏è Usuario p√∫blico {username} no encontr√≥ servidores para juego {game_id} - API respondi√≥: {data.get('message', 'Sin mensaje')}")
                        return

                    elif "servers" in data and isinstance(data["servers"], list):
                        servers = data["servers"]

                        if servers:
                            # Limitar servidores mostrados para usuarios p√∫blicos (m√°ximo 5)
                            max_servers_display = 5
                            servers_to_show = servers[:max_servers_display]

                            # Crear embed con servidores encontrados
                            success_embed = discord.Embed(
                                title="<a:verify2:1418486831993061497> Servidores Obtenidos",
                                description=f"Se encontraron **{len(servers)}** servidores para el juego ID: `{game_id}`",
                                color=0x495057
                            )

                            # Agregar informaci√≥n del juego
                            success_embed.add_field(
                                name="<a:control:1418490793223651409> ID del Juego",
                                value=f"`{data.get('game_id', game_id)}`",
                                inline=True
                            )

                            success_embed.add_field(
                                name="<:stats:1418490788437823599> Total de Servidores",
                                value=f"`{len(servers)}`",
                                inline=True
                            )

                            success_embed.add_field(
                                name="<a:latencia:1418504412049182740> Fuente",
                                value="API Externa",
                                inline=True
                            )

                            # Mostrar los primeros servidores
                            servers_text = ""
                            for i, server in enumerate(servers_to_show, 1):
                                servers_text += f"`{i}.` {server}\n"

                            if len(servers) > max_servers_display:
                                servers_text += f"\n... y {len(servers) - max_servers_display} servidores m√°s"
                                servers_text += f"\n\n<a:foco:1418492184373755966> *Para ver todos los servidores, contacta a un administrador*"

                            success_embed.add_field(
                                name="üîó Servidores VIP:",
                                value=servers_text,
                                inline=False
                            )

                            # Informaci√≥n adicional
                            success_embed.add_field(
                                name="<a:loading:1418504453580918856> Consultado",
                                value=f"<t:{int(datetime.now().timestamp())}:R>",
                                inline=True
                            )

                            success_embed.add_field(
                                name="<:1000182614:1396049500375875646> Solicitado por",
                                value=f"{username}",
                                inline=True
                            )

                            success_embed.add_field(
                                name="<:portapapeles:1418506653279715500> Limitaci√≥n",
                                value=f"Mostrando {min(len(servers), max_servers_display)} de {len(servers)}",
                                inline=True
                            )

                            # Agregar informaci√≥n de l√≠mites para respuestas con servidores
                            try:
                                is_donator_info = await check_user_donation_status(user_id)
                                current_usage_info = limiter.get_user_usage(user_id)
                                daily_limit_info = DAILY_LIMIT_DONATOR if is_donator_info else DAILY_LIMIT_REGULAR
                                remaining_uses = daily_limit_info - current_usage_info

                                status_text = "üéÅ Donador" if is_donator_info else "<:1000182614:1396049500375875646> Regular"

                                success_embed.add_field(
                                    name="<:stats:1418490788437823599> Tu Estado de Uso",
                                    value=f"{status_text} | **{current_usage_info}/{daily_limit_info}** usos hoy | **{remaining_uses}** restantes",
                                    inline=False
                                )
                            except Exception as e:
                                logger.error(f"Error agregando info de l√≠mites: {e}")

                            success_embed.set_footer(text="RbxServers ‚Ä¢ API Externa ‚Ä¢ L√≠mites diarios aplicados")

                            await message.edit(embed=success_embed)

                            logger.info(f"<a:verify2:1418486831993061497> Usuario p√∫blico {username} obtuvo {len(servers)} servidores para juego {game_id} (mostrados: {len(servers_to_show)})")

                        else:
                            # No se encontraron servidores
                            no_servers_embed = discord.Embed(
                                title="üîç Sin Servidores Disponibles",
                                description="No se encontraron servidores en nuestra base de datos para este juego.",
                                color=0x6c757d
                            )

                            no_servers_embed.add_field(
                                name="<a:control:1418490793223651409> ID del Juego",
                                value=f"`{game_id}`",
                                inline=True
                            )

                            no_servers_embed.add_field(
                                name="<:stats:1418490788437823599> Servidores Encontrados",
                                value="`0`",
                                inline=True
                            )

                            no_servers_embed.add_field(
                                name="<:1000182614:1396049500375875646> Solicitado por",
                                value=f"{username}",
                                inline=True
                            )

                            no_servers_embed.add_field(
                                name="<a:foco:1418492184373755966> Sugerencia",
                                value="‚Ä¢ Verifica que el ID del juego sea correcto\n‚Ä¢ El juego podr√≠a no tener servidores VIP\n‚Ä¢ Intenta con otro ID de juego",
                                inline=False
                            )

                            no_servers_embed.add_field(
                                name="<a:loading:1418504453580918856> Consultado",
                                value=f"<t:{int(datetime.now().timestamp())}:R>",
                                inline=True
                            )

                            # Agregar informaci√≥n de l√≠mites para respuestas sin servidores
                            try:
                                is_donator_info = await check_user_donation_status(user_id)
                                current_usage_info = limiter.get_user_usage(user_id)
                                daily_limit_info = DAILY_LIMIT_DONATOR if is_donator_info else DAILY_LIMIT_REGULAR
                                remaining_uses = daily_limit_info - current_usage_info

                                status_text = "üéÅ Donador" if is_donator_info else "<:1000182614:1396049500375875646> Regular"

                                no_servers_embed.add_field(
                                    name="<:stats:1418490788437823599> Tu Estado de Uso",
                                    value=f"{status_text} | **{current_usage_info}/{daily_limit_info}** usos hoy | **{remaining_uses}** restantes",
                                    inline=False
                                )
                            except Exception as e:
                                logger.error(f"Error agregando info de l√≠mites: {e}")

                            no_servers_embed.set_footer(text="RbxServers ‚Ä¢ API Externa ‚Ä¢ L√≠mites diarios aplicados")


                            await message.edit(embed=no_servers_embed)

                            logger.info(f"‚ö†Ô∏è Usuario p√∫blico {username} no encontr√≥ servidores para juego {game_id}")

                    else:
                        # Respuesta de API con formato incorrecto
                        error_embed = discord.Embed(
                            title="‚ùå Formato de Respuesta Inv√°lido",
                            description="La API respondi√≥ con un formato de datos inesperado.",
                            color=0x6c757d
                        )
                        error_embed.add_field(
                            name="<:1000182614:1396049500375875646> Solicitado por",
                            value=f"{username}",
                            inline=True
                        )
                        error_embed.add_field(
                            name="üîç Respuesta Recibida",
                            value=f"```json\n{str(data)[:300]}{'...' if len(str(data)) > 300 else ''}```",
                            inline=False
                        )

                        await message.edit(embed=error_embed)

                except ValueError as e:
                    # Error parseando JSON
                    error_embed = discord.Embed(
                        title="‚ùå Error de Formato JSON",
                        description="La API respondi√≥ con datos que no son JSON v√°lido.",
                        color=0x6c757d
                    )
                    error_embed.add_field(
                        name="<:1000182614:1396049500375875646> Solicitado por",
                        value=f"{username}",
                        inline=True
                    )
                    error_embed.add_field(
                        name="üîç Respuesta Raw",
                        value=f"```{response.text[:300]}{'...' if len(response.text) > 300 else ''}```",
                        inline=False
                    )

                    await message.edit(embed=error_embed)
                    logger.error(f"‚ùå Error parseando JSON de API: {e}")

            else:
                # Error HTTP de la API
                error_embed = discord.Embed(
                    title="‚ùå Error de API Externa",
                    description=f"La API respondi√≥ con c√≥digo de error: `{response.status_code}`",
                    color=0x6c757d
                )

                error_embed.add_field(
                    name="<a:control:1418490793223651409> ID del Juego",
                    value=f"`{game_id}`",
                    inline=True
                )

                error_embed.add_field(
                    name="üî¥ C√≥digo de Error",
                    value=f"`{response.status_code}`",
                    inline=True
                )

                error_embed.add_field(
                    name="<:1000182614:1396049500375875646> Solicitado por",
                    value=f"{username}",
                    inline=True
                )

                error_embed.add_field(
                    name="üìù Respuesta del Servidor",
                    value=f"```{response.text[:150]}{'...' if len(response.text) > 150 else ''}```",
                    inline=False
                )

                error_embed.add_field(
                    name="<a:foco:1418492184373755966> Posibles Causas",
                    value="‚Ä¢ ID de juego no existe en la API\n‚Ä¢ Problemas temporales del servidor\n‚Ä¢ API sobrecargada",
                    inline=False
                )

                await message.edit(embed=error_embed)
                logger.error(f"‚ùå API respondi√≥ con error {response.status_code} para juego {game_id} (usuario p√∫blico: {username})")

        except requests.Timeout:
            timeout_embed = discord.Embed(
                title="<a:loading:1418504453580918856> Timeout de API",
                description="La API externa tard√≥ demasiado en responder (m√°s de 30 segundos).",
                color=0x6c757d
            )
            timeout_embed.add_field(
                name="<:1000182614:1396049500375875646> Solicitado por",
                value=f"{username}",
                inline=True
            )
            timeout_embed.add_field(
                name="<a:foco:1418492184373755966> Sugerencia",
                value="Intenta nuevamente en unos momentos",
                inline=False
            )

            await message.edit(embed=timeout_embed)
            logger.error(f"‚ùå Timeout consultando API para juego {game_id} (usuario p√∫blico: {username})")

        except requests.ConnectionError:
            connection_embed = discord.Embed(
                title="<a:latencia:1418504412049182740> Error de Conexi√≥n",
                description="No se pudo conectar con la API externa.",
                color=0x6c757d
            )
            connection_embed.add_field(
                name="<:1000182614:1396049500375875646> Solicitado por",
                value=f"{username}",
                inline=True
            )
            connection_embed.add_field(
                name="<a:foco:1418492184373755966> Posibles Causas",
                value="‚Ä¢ Problemas de conectividad\n‚Ä¢ API temporalmente no disponible\n‚Ä¢ DNS no resuelve correctamente",
                inline=False
            )

            await message.edit(embed=connection_embed)
            logger.error(f"‚ùå Error de conexi√≥n consultando API para juego {game_id} (usuario p√∫blico: {username})")

        except Exception as e:
            # Error general
            logger.error(f"‚ùå Error en comando publicget: {e}")

            error_embed = discord.Embed(
                title="‚ùå Error Interno",
                description="Ocurri√≥ un error inesperado al consultar la API.",
                color=0x6c757d
            )
            error_embed.add_field(
                name="<:1000182614:1396049500375875646> Solicitado por",
                value=f"{username}",
                inline=True
            )
            error_embed.add_field(
                name="üêõ Error",
                value=f"```{str(e)[:150]}{'...' if len(str(e)) > 150 else ''}```",
                inline=False
            )
            error_embed.add_field(
                name="<a:foco:1418492184373755966> Sugerencia",
                value="Contacta al desarrollador si el problema persiste",
                inline=False
            )

            await message.edit(embed=error_embed)

    logger.info("<a:verify2:1418486831993061497> Comando /publicget registrado correctamente")
    return True


def cleanup_commands(bot):
    """Funci√≥n de limpieza opcional"""
    pass