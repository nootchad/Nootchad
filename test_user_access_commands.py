
import asyncio
import discord
from discord.ext import commands
import time
import json
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AccessCodeTester:
    """Simulador de pruebas para comandos de c√≥digos de acceso"""
    
    def __init__(self):
        self.test_user_id = "123456789012345678"
        self.test_username = "TestUser"
        
    def simulate_access_code_command(self):
        """Simular el comando /access_code"""
        print("üß™ SIMULANDO COMANDO /access_code")
        print("=" * 50)
        
        try:
            # Importar el sistema de c√≥digos
            from apis import access_code_system
            
            # Generar c√≥digo para usuario de prueba
            access_code = access_code_system.generate_user_code(self.test_user_id)
            
            # Simular la respuesta del embed
            print(f"<:1000182584:1396049547838492672> C√≥digo de Acceso Generado")
            print(f"Tu c√≥digo de acceso temporal ha sido creado exitosamente")
            print(f"")
            print(f"<:verify:1396087763388072006> Tu C√≥digo de Acceso:")
            print(f"```")
            print(f"{access_code}")
            print(f"```")
            print(f"")
            print(f"<:1000182657:1396060091366637669> Informaci√≥n del C√≥digo:")
            expires_at = time.time() + (24 * 60 * 60)
            print(f"**Expira:** en 24 horas")
            print(f"**Usos m√°ximos:** 50")
            print(f"**Usuario:** {self.test_username}")
            print(f"")
            print(f"<:1000182751:1396420551798558781> Uso del C√≥digo:")
            print(f"‚Ä¢ Usa este c√≥digo en aplicaciones externas")
            print(f"‚Ä¢ El c√≥digo se invalida al generar uno nuevo")
            print(f"‚Ä¢ M√°ximo 50 usos en 24 horas")
            print(f"")
            print(f"<:1000182750:1396420537227411587> Endpoints de API:")
            print(f"**Verificar c√≥digo:**")
            print(f"`POST /api/user-access/verify`")
            print(f"")
            print(f"**Obtener informaci√≥n:**")
            print(f"`GET /api/user-access/info/{access_code}`")
            print(f"")
            print(f"<:1000182563:1396420770904932372> Importante:")
            print(f"‚Ä¢ No compartas tu c√≥digo con nadie")
            print(f"‚Ä¢ Se genera un nuevo c√≥digo cada vez que uses este comando")
            print(f"‚Ä¢ El c√≥digo anterior se invalida autom√°ticamente")
            
            return access_code
            
        except Exception as e:
            print(f"<:1000182563:1396420770904932372> Error simulando comando: {e}")
            return None
    
    def simulate_access_info_command(self):
        """Simular el comando /access_info"""
        print("\nüß™ SIMULANDO COMANDO /access_info")
        print("=" * 50)
        
        print(f"<:1000182584:1396049547838492672> Sistema de C√≥digos de Acceso")
        print(f"Informaci√≥n sobre c√≥mo usar los c√≥digos de acceso temporal")
        print(f"")
        print(f"<:1000182751:1396420551798558781> ¬øQu√© son los C√≥digos de Acceso?")
        print(f"Los c√≥digos de acceso permiten a aplicaciones externas obtener")
        print(f"tu informaci√≥n de forma segura sin necesidad de credenciales permanentes.")
        print(f"")
        print(f"<:verify:1396087763388072006> C√≥mo Funciona:")
        print(f"1. Generas un c√≥digo con `/access_code`")
        print(f"2. Usas el c√≥digo en una aplicaci√≥n externa")
        print(f"3. La aplicaci√≥n obtiene tu informaci√≥n de RbxServers")
        print(f"4. El c√≥digo expira en 24 horas o despu√©s de 50 usos")
        print(f"")
        print(f"<:1000182656:1396059543951118416> Seguridad:")
        print(f"‚Ä¢ Cada c√≥digo es √∫nico para ti")
        print(f"‚Ä¢ Los c√≥digos expiran autom√°ticamente")
        print(f"‚Ä¢ Generar un nuevo c√≥digo invalida el anterior")
        print(f"‚Ä¢ L√≠mite de usos para prevenir abuso")
        print(f"")
        print(f"<:1000182750:1396420537227411587> Informaci√≥n Disponible:")
        print(f"‚Ä¢ Estado de verificaci√≥n de Roblox")
        print(f"‚Ä¢ Estad√≠sticas de servidores")
        print(f"‚Ä¢ Balance de monedas")
        print(f"‚Ä¢ Actividad en el bot")
        print(f"‚Ä¢ Informaci√≥n de seguridad")
        print(f"")
        print(f"<:1000182657:1396060091366637669> Comandos Disponibles:")
        print(f"`/access_code` - Generar nuevo c√≥digo")
        print(f"`/access_info` - Ver esta informaci√≥n")
    
    def test_code_functionality(self, access_code):
        """Probar la funcionalidad del c√≥digo generado"""
        print("\nüß™ PROBANDO FUNCIONALIDAD DEL C√ìDIGO")
        print("=" * 50)
        
        try:
            from apis import access_code_system
            
            # Validar el c√≥digo
            validation_result = access_code_system.validate_code(access_code)
            
            if validation_result['valid']:
                print(f"<:verify:1396087763388072006> C√≥digo v√°lido:")
                print(f"  Usuario: {validation_result['user_id']}")
                print(f"  Usos: {validation_result['uses']}/{validation_result['max_uses']}")
                print(f"  Expira: {time.ctime(validation_result['expires_at'])}")
                
                # Obtener informaci√≥n del usuario
                user_info = access_code_system.get_user_info(validation_result['user_id'])
                
                print(f"\n<:1000182584:1396049547838492672> Informaci√≥n del usuario obtenida:")
                print(f"  ID: {user_info.get('user_id', 'N/A')}")
                
                verification = user_info.get('verification', {})
                print(f"  Verificado: {verification.get('is_verified', False)}")
                
                servers = user_info.get('servers', {})
                print(f"  Servidores: {servers.get('total_servers', 0)}")
                
                economy = user_info.get('economy', {})
                print(f"  Monedas: {economy.get('coins_balance', 0)}")
                
            else:
                print(f"<:1000182563:1396420770904932372> C√≥digo inv√°lido: {validation_result['error']}")
                
        except Exception as e:
            print(f"<:1000182563:1396420770904932372> Error probando c√≥digo: {e}")
    
    def test_code_expiration(self):
        """Probar manejo de c√≥digos expirados y l√≠mites"""
        print("\nüß™ PROBANDO MANEJO DE EXPIRACI√ìN Y L√çMITES")
        print("=" * 50)
        
        try:
            from apis import access_code_system
            
            # Generar c√≥digo
            access_code = access_code_system.generate_user_code(self.test_user_id)
            print(f"<:verify:1396087763388072006> C√≥digo generado: {access_code}")
            
            # Simular m√∫ltiples usos
            print(f"\n<:1000182751:1396420551798558781> Probando m√∫ltiples usos...")
            for i in range(5):
                result = access_code_system.validate_code(access_code)
                if result['valid']:
                    print(f"  Uso {i+1}: ‚úÖ V√°lido (usos: {result['uses']}/{result['max_uses']})")
                else:
                    print(f"  Uso {i+1}: ‚ùå {result['error']}")
                    break
            
            # Probar invalidaci√≥n al generar nuevo c√≥digo
            print(f"\n<:1000182751:1396420551798558781> Probando invalidaci√≥n autom√°tica...")
            old_code = access_code
            new_code = access_code_system.generate_user_code(self.test_user_id)
            
            print(f"  C√≥digo anterior: {old_code}")
            print(f"  C√≥digo nuevo: {new_code}")
            
            # Verificar que el c√≥digo anterior ya no funciona
            old_result = access_code_system.validate_code(old_code)
            new_result = access_code_system.validate_code(new_code)
            
            print(f"  C√≥digo anterior v√°lido: {old_result['valid']}")
            print(f"  C√≥digo nuevo v√°lido: {new_result['valid']}")
            
        except Exception as e:
            print(f"<:1000182563:1396420770904932372> Error en pruebas de expiraci√≥n: {e}")
    
    def run_all_tests(self):
        """Ejecutar todas las pruebas"""
        print("üöÄ INICIANDO PRUEBAS COMPLETAS DE C√ìDIGOS DE ACCESO")
        print("=" * 60)
        
        # 1. Simular comando /access_code
        access_code = self.simulate_access_code_command()
        
        if access_code:
            # 2. Probar funcionalidad del c√≥digo
            self.test_code_functionality(access_code)
            
            # 3. Simular comando /access_info
            self.simulate_access_info_command()
            
            # 4. Probar expiraci√≥n y l√≠mites
            self.test_code_expiration()
        
        print("\n" + "=" * 60)
        print("üèÅ PRUEBAS COMPLETADAS")
        print("=" * 60)
        
        if access_code:
            print(f"\n<:1000182584:1396049547838492672> Resultados:")
            print(f"‚Ä¢ C√≥digo generado exitosamente: {access_code}")
            print(f"‚Ä¢ Comandos funcionando correctamente")
            print(f"‚Ä¢ Sistema de validaci√≥n operativo")
            print(f"‚Ä¢ Invalidaci√≥n autom√°tica funcionando")
        else:
            print(f"\n<:1000182563:1396420770904932372> Algunas pruebas fallaron")

def main():
    """Funci√≥n principal"""
    tester = AccessCodeTester()
    tester.run_all_tests()

if __name__ == "__main__":
    main()
